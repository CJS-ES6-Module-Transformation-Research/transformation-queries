
import {JSFile} from "../../src/abstract_fs_v2/JSv2";
import {createProject} from "../index";
import {TEST_DIR} from "../index";
import { expect } from "chai";
describe('json_require', ()=>{

it('parallel_json_require', ()=>{ 
	const project =  createProject('/Users/sam/Dropbox/Spring_20/research_proj/CJS_Transform/test/test_data/json_require/parallel_json_require', false) 
	let actualJS: JSFile = project.getJS(  'parallel_json_require.actual.js');
	requireStringSanitizer(actualJS)
	let prjS = project.getJS('parallel_json_require.expected.js')

	let expected = prjS.makeSerializable().fileData
	expect(expected).to.be.equal(actualJS.makeSerializable().fileData, 'error in   parallel_json_require');
});
it('up_one_json_require', ()=>{ 
	const project =  createProject('/Users/sam/Dropbox/Spring_20/research_proj/CJS_Transform/test/test_data/json_require/up_one_json_require', false) 
	let actualJS: JSFile = project.getJS(  'up_one_json_require.actual.js');
	requireStringSanitizer(actualJS)
	let prjS = project.getJS('up_one_json_require.expected.js')

	let expected = prjS.makeSerializable().fileData
	expect(expected).to.be.equal(actualJS.makeSerializable().fileData, 'error in   up_one_json_require');
});
it('down_one_json_require', ()=>{ 
	const project =  createProject('/Users/sam/Dropbox/Spring_20/research_proj/CJS_Transform/test/test_data/json_require/down_one_json_require', false) 
	let actualJS: JSFile = project.getJS(  'down_one_json_require.actual.js');
	requireStringSanitizer(actualJS)
	let prjS = project.getJS('down_one_json_require.expected.js')

	let expected = prjS.makeSerializable().fileData
	expect(expected).to.be.equal(actualJS.makeSerializable().fileData, 'error in   down_one_json_require');
});
it('multi_json_require_same_mid', ()=>{ 
	const project =  createProject('/Users/sam/Dropbox/Spring_20/research_proj/CJS_Transform/test/test_data/json_require/multi_json_require_same_mid', false) 
	let actualJS: JSFile = project.getJS(  'multi_json_require_same_mid.actual.js');
	requireStringSanitizer(actualJS)
	let prjS = project.getJS('multi_json_require_same_mid.expected.js')

	let expected = prjS.makeSerializable().fileData
	expect(expected).to.be.equal(actualJS.makeSerializable().fileData, 'error in   multi_json_require_same_mid');
});
it('js_has_priority', ()=>{ 
	const project =  createProject('/Users/sam/Dropbox/Spring_20/research_proj/CJS_Transform/test/test_data/json_require/js_has_priority', false) 
	let actualJS: JSFile = project.getJS(  'js_has_priority.actual.js');
	requireStringSanitizer(actualJS)
	let prjS = project.getJS('js_has_priority.expected.js')

	let expected = prjS.makeSerializable().fileData
	expect(expected).to.be.equal(actualJS.makeSerializable().fileData, 'error in   js_has_priority');
});
	});